prog := (assign)* expr
assign := "let" ident (":" type)? "=" expr ";"

expr := if
if := or | "if (" or ") {" prog "} else {" prog "}" 
or := and ("||" and)*
and := equ ("&&" equ)*
equ := rel ("==" rel | "!=" rel)*
rel := add ("<" add | ">" add | ">=" add | "<=" add)*
add := mul ('+' mul | '-' mul)*
mul := unary ('*' unary | '/' unary)*
unary := ("-" | "!")? app
app := primary ( "(" expr ")" )*
primary := int | bool | ident | '(' expr ')' | lambda

bool := "true" | "false"
lambda := "lambda (" ident ":" type ") {" prog "}"

========================

type := fntype
fntype = primary_type ("->" primary_type)*
primary_type := "int" | "bool" | "(" type ")"